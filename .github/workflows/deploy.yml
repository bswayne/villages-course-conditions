name: Deploy Villages Conditions App

on:
  push:
    branches: [main]

env:
  BACKEND_IMAGE_NAME: villages-conditions-backend
  FRONTEND_IMAGE_NAME: villages-conditions-frontend
  IMAGE_TAG: ${{ github.sha }}
  VAULT_ADDR: https://vault.bcjs.us
  CLOUDFLARED_VERSION: "2024.3.0"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 1. Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 2. Build Docker Images (Pass only NON-Vault variables)
    - name: Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: ${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.BACKEND_IMAGE_NAME }}:latest
        load: true

    - name: Build Frontend Image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.FRONTEND_IMAGE_NAME }}:latest
        load: true
        build-args: |
          VITE_API_BASE_URL=${{ secrets.PROD_VITE_API_BASE_URL }}
    
     # 3. Install Cloudflared Client on Runner
    - name: Install Cloudflared
      run: |
       wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -O cloudflared.deb
       sudo dpkg -i cloudflared.deb
       cloudflared --version
    
    - name: Write SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_deploy_server
        chmod 600 ~/.ssh/id_deploy_server
        echo "SSH private key written to ~/.ssh/id_deploy_server"
       
    # 5. Deploy via SSH using direct command and ProxyCommand
    - name: Deploy Application via SSH Tunnel
      run: |
        echo "Attempting SSH connection to ${{ secrets.DEPLOY_HOST }} via Cloudflare Tunnel..."

        REMOTE_SCRIPT=$(cat << EOF
        # --- SCRIPT RUNNING ON YOUR TARGET SERVER ---
        set -e

        DEPLOY_DIR="/home/bswayne/villages-conditions" # Your chosen directory
        VAULT_ADDR="${{ env.VAULT_ADDR }}"
        IMAGE_TAG="${{ env.IMAGE_TAG }}"
        VITE_API_BASE_URL="${{ secrets.PROD_VITE_API_BASE_URL }}"
        ROLE_ID_PATH="/etc/vault/approle_role_id"
        SECRET_ID_PATH="/etc/vault/approle_secret_id"

        echo "--- Deploying to ${DEPLOY_DIR} ---"
        mkdir -p "\$DEPLOY_DIR"
        cd "\$DEPLOY_DIR" || { echo "::error::Failed to cd into ${DEPLOY_DIR}"; exit 1; }

        # --- UNCOMMENT/ADD Git Update Section ---
        echo "--- Updating source code via git ---"
        # Add the deployment directory as safe *globally* for the user running the script
        # This is often necessary when git operations are triggered via SSH/automation
        git config --global --add safe.directory "\$DEPLOY_DIR"
        # Pull the latest changes from the main branch (or your deployment branch)
        git pull origin main
        # --- END Git Update Section ---

        echo "--- Authenticating to Vault from server ---"
        # ... (rest of Vault auth logic remains the same) ...
        if [ ! -r "\$ROLE_ID_PATH" ]; then echo "::error::RoleID file not found or not readable at \$ROLE_ID_PATH"; exit 1; fi
        # ... etc ...
        export VAULT_TOKEN=\$(vault write -field=token auth/approle/login role_id="\$VAULT_ROLE_ID" secret_id="\$VAULT_SECRET_ID")
        # ... check VAULT_TOKEN ...
        echo "Vault AppRole login successful (Token expires soon)."

        echo "--- Fetching secrets and updating .env file ---"
        # ... (rest of Vault secret fetching and .env writing remains the same) ...
        printf '%s\\n' \
        "FRONTEND_URL=\${FRONTEND_URL_VAL}" \
        "VITE_API_BASE_URL=${VITE_API_BASE_URL}" \
        "FIREBASE_ADMIN_SDK_JSON_CONTENT='\${FIREBASE_JSON_CONTENT}'" \
        "BACKEND_IMAGE_TAG=${IMAGE_TAG}" \
        "FRONTEND_IMAGE_TAG=${IMAGE_TAG}" \
        > .env
        echo ".env file updated."

        echo "--- Running docker compose up ---"
        # --build ensures images are built using the updated code from git pull
        docker compose --env-file .env up -d --remove-orphans --force-recreate --build

        echo "--- Cleaning up dangling images ---"
        docker image prune -f

        echo "--- Deployment complete! ---"
        EOF
        ) # End of REMOTE_SCRIPT definition

        # Execute SSH command (remains the same)
        echo "$REMOTE_SCRIPT" | ssh -i ~/.ssh/id_deploy_server \
            -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=no \
            -o ProxyCommand="/usr/local/bin/cloudflared access ssh --hostname %h" \
            "${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }}" \
            bash -s
        # --- End Execute SSH ---

        echo "SSH command finished."