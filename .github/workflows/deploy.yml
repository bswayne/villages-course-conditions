name: Deploy Villages Conditions App

on:
  push:
    branches: [main]

env:
  BACKEND_IMAGE_NAME: villages-conditions-backend
  FRONTEND_IMAGE_NAME: villages-conditions-frontend
  IMAGE_TAG: ${{ github.sha }}
  VAULT_ADDR: https://vault.bcjs.us
  CLOUDFLARED_VERSION: "2024.3.0"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Install Cloudflared
      run: |
       wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -O cloudflared.deb
       sudo dpkg -i cloudflared.deb
       cloudflared --version
    
    - name: Write SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_deploy_server
        chmod 600 ~/.ssh/id_deploy_server
        echo "SSH private key written to ~/.ssh/id_deploy_server"
       
    # 5. Deploy via SSH using direct command and ProxyCommand
    - name: Deploy Application via SSH Tunnel
      run: |
        echo "Attempting SSH connection to ${{ secrets.DEPLOY_HOST }} via Cloudflare Tunnel..."

        REMOTE_SCRIPT=$(cat << EOF
        # --- SCRIPT RUNNING ON YOUR TARGET SERVER ---
        set -e

        DEPLOY_DIR="/home/bswayne/villages-course-conditions" 
        VAULT_ADDR="${{ env.VAULT_ADDR }}"
        IMAGE_TAG="${{ env.IMAGE_TAG }}"
        VITE_API_BASE_URL="${{ secrets.PROD_VITE_API_BASE_URL }}"
        ROLE_ID_PATH="/etc/vault/approle_role_id"
        SECRET_ID_PATH="/etc/vault/approle_secret_id"

        echo "--- Deploying to ${DEPLOY_DIR} ---"
        mkdir -p "\$DEPLOY_DIR"
        cd "\$DEPLOY_DIR" || { echo "::error::Failed to cd into ${DEPLOY_DIR}"; exit 1; }

        # --- UNCOMMENT/ADD Git Update Section ---
        echo "--- Updating source code via git ---"
        # Add the deployment directory as safe *globally* for the user running the script
        # This is often necessary when git operations are triggered via SSH/automation
        git config --global --add safe.directory "\$DEPLOY_DIR"
        # Pull the latest changes from the main branch (or your deployment branch)
        git pull origin main
        # --- END Git Update Section ---

        echo "--- Authenticating to Vault from server ---"
        if [ ! -r "\$ROLE_ID_PATH" ]; then echo "::error::RoleID file not found or not readable at \$ROLE_ID_PATH"; exit 1; fi
        if [ ! -r "\$SECRET_ID_PATH" ]; then echo "::error::SecretID file not found or not readable at \$SECRET_ID_PATH"; exit 1; fi
        VAULT_ROLE_ID=\$(cat "\$ROLE_ID_PATH")
        VAULT_SECRET_ID=\$(cat "\$SECRET_ID_PATH")
        if [ -z "\$VAULT_ROLE_ID" ] || [ -z "\$VAULT_SECRET_ID" ]; then echo "::error::Failed to read RoleID/SecretID"; exit 1; fi

        export VAULT_TOKEN=\$(vault write -field=token auth/approle/login role_id="\$VAULT_ROLE_ID" secret_id="\$VAULT_SECRET_ID")
        if [ -z "\$VAULT_TOKEN" ]; then echo "::error::Vault AppRole login failed"; exit 1; fi
        echo "Vault AppRole login successful (Token expires soon)."

        echo "--- Fetching secrets and updating .env file ---"
        BACKEND_SECRETS=\$(vault kv get -format=json secret/ci/villages-conditions/backend) 
        FRONTEND_SECRETS=\$(vault kv get -format=json secret/ci/villages-conditions/frontend)

        # Extract ALL secrets needed into shell variables
        FIREBASE_JSON_CONTENT=\$(echo "\$BACKEND_SECRETS" | jq -r '.data.data.FIREBASE_ADMIN_SDK_JSON')
        FRONTEND_URL_VAL=\$(echo "\$BACKEND_SECRETS" | jq -r '.data.data.FRONTEND_URL // "http://localhost:8080"')
        VITE_FB_API_URL_VAL=$(echo "$FRONTEND_SECRETS" | jq -r '.data.data.VITE_API_BASE_URL // "/api"')
        VITE_FB_API_KEY=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_API_KEY // ""')
        VITE_FB_AUTH_DOMAIN=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_AUTH_DOMAIN // ""')
        VITE_FB_PROJECT_ID=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_PROJECT_ID // ""')
        VITE_FB_STORAGE_BUCKET=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_STORAGE_BUCKET // ""')
        VITE_FB_MSG_SENDER_ID=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_MESSAGING_SENDER_ID // ""')
        VITE_FB_APP_ID=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_APP_ID // ""')
        VITE_FB_MEASUREMENT_ID=\$(echo "\$FRONTEND_SECRETS" | jq -r '.data.data.VITE_FIREBASE_MEASUREMENT_ID // ""')

        # --- Check Essential Vars ---
        if [ -z "\$FIREBASE_JSON_CONTENT" ] || [ "\$FIREBASE_JSON_CONTENT" == "null" ]; then echo "::error::FIREBASE_ADMIN_SDK_JSON invalid"; exit 1; fi
        if [ -z "\$VITE_FB_API_KEY" ] || [ "\$VITE_FB_API_KEY" == "null" ]; then echo "::error::VITE_FIREBASE_API_KEY invalid"; exit 1; fi

        echo "--- Updating .env file ---"
        # Use multiple echo commands - overwrite then append
        echo "FRONTEND_URL=\${FRONTEND_URL_VAL}" > .env
        echo "VITE_API_BASE_URL=\${VITE_FB_API_URL_VAL}" >> .env
        printf "FIREBASE_ADMIN_SDK_JSON_CONTENT='%s'\\n" "\${FIREBASE_JSON_CONTENT}" >> .env
        echo "BACKEND_IMAGE_TAG=${IMAGE_TAG}" >> .env
        echo "FRONTEND_IMAGE_TAG=${IMAGE_TAG}" >> .env
        echo "VITE_FIREBASE_API_KEY=\${VITE_FB_API_KEY}" >> .env
        echo "VITE_FIREBASE_AUTH_DOMAIN=\${VITE_FB_AUTH_DOMAIN}" >> .env
        echo "VITE_FIREBASE_PROJECT_ID=\${VITE_FB_PROJECT_ID}" >> .env
        echo "VITE_FIREBASE_STORAGE_BUCKET=\${VITE_FB_STORAGE_BUCKET}" >> .env
        echo "VITE_FIREBASE_MESSAGING_SENDER_ID=\${VITE_FB_MSG_SENDER_ID}" >> .env
        echo "VITE_FIREBASE_APP_ID=\${VITE_FB_APP_ID}" >> .env
        echo "VITE_FIREBASE_MEASUREMENT_ID=\${VITE_FB_MEASUREMENT_ID}" >> .env
        echo ".env file updated."

        echo "--- Running docker compose up ---"
        docker compose --env-file .env up -d --remove-orphans --force-recreate --build

        echo "--- Cleaning up dangling images ---"
        docker image prune -f

        echo "--- Deployment complete! ---"
        EOF
        ) # End of REMOTE_SCRIPT definition

        # Execute SSH command (remains the same)
        echo "$REMOTE_SCRIPT" | ssh -i ~/.ssh/id_deploy_server \
            -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=no \
            -o ProxyCommand="/usr/local/bin/cloudflared access ssh --hostname %h" \
            "${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }}" \
            bash -s
        # --- End Execute SSH ---
        echo "Is it working?."  
        echo "SSH command finished."